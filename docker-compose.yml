version: '3.8'

services:
  # Frontend React
  frontend:
    build: .
    ports:
      - "80:80"
    environment:
      - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
      - VITE_API_URL=http://backend-sql:3001
      - VITE_POSTGRES_API_URL=http://backend-postgres:3002
    depends_on:
      - backend-sql
      - backend-postgres
    restart: unless-stopped

  # Backend SQL Server
  backend-sql:
    build: ./server
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - SQLSERVER_HOST=${SQLSERVER_HOST}
      - SQLSERVER_PORT=${SQLSERVER_PORT}
      - SQLSERVER_USER=${SQLSERVER_USER}
      - SQLSERVER_PASSWORD=${SQLSERVER_PASSWORD}
      - SQLSERVER_DB=${SQLSERVER_DB}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend PostgreSQL
  backend-postgres:
    build: ./postgres-server
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - HOST=${POSTGRES_HOST}
      - PORT=${POSTGRES_PORT}
      - DB=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - PASSWORD=${POSTGRES_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (opcional)
  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend-sql
      - backend-postgres
    restart: unless-stopped

volumes:
  postgres_data:
